// Mocks generated by Mockito 5.4.6 from annotations
// in zentriq/test/viewmodels/nft_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:zentriq/core/utils/result.dart' as _i5;
import 'package:zentriq/core/utils/use_case.dart' as _i7;
import 'package:zentriq/domain/entities/nft.dart' as _i6;
import 'package:zentriq/domain/repositories/nft_repository.dart' as _i2;
import 'package:zentriq/domain/usecases/get_all_nfts.dart' as _i3;
import 'package:zentriq/domain/usecases/send_nft.dart' as _i9;
import 'package:zentriq/domain/usecases/update_nft_visibility.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeNftRepository_0 extends _i1.SmartFake implements _i2.NftRepository {
  _FakeNftRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAllNfts].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllNfts extends _i1.Mock implements _i3.GetAllNfts {
  MockGetAllNfts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NftRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeNftRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.NftRepository);

  @override
  _i4.Future<_i5.Result<List<_i6.Nft>>> call(_i7.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i5.Result<List<_i6.Nft>>>.value(
            _i8.dummyValue<_i5.Result<List<_i6.Nft>>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i5.Result<List<_i6.Nft>>>);
}

/// A class which mocks [SendNft].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendNft extends _i1.Mock implements _i9.SendNft {
  MockSendNft() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NftRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeNftRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.NftRepository);

  @override
  _i4.Future<_i5.Result<_i6.NftTransaction>> call(_i9.SendNftParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i5.Result<_i6.NftTransaction>>.value(
            _i8.dummyValue<_i5.Result<_i6.NftTransaction>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i5.Result<_i6.NftTransaction>>);
}

/// A class which mocks [UpdateNftVisibility].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateNftVisibility extends _i1.Mock
    implements _i10.UpdateNftVisibility {
  MockUpdateNftVisibility() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NftRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeNftRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.NftRepository);

  @override
  _i4.Future<_i5.Result<void>> call(_i10.UpdateNftVisibilityParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i5.Result<void>>.value(_i8.dummyValue<_i5.Result<void>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i5.Result<void>>);
}
