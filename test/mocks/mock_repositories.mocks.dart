// Mocks generated by Mockito 5.4.6 from annotations
// in zentriq/test/mocks/mock_repositories.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:zentriq/core/utils/result.dart' as _i4;
import 'package:zentriq/domain/entities/news_article.dart' as _i13;
import 'package:zentriq/domain/entities/project.dart' as _i11;
import 'package:zentriq/domain/entities/token.dart' as _i9;
import 'package:zentriq/domain/entities/transaction.dart' as _i7;
import 'package:zentriq/domain/entities/wallet.dart' as _i5;
import 'package:zentriq/domain/repositories/news_repository.dart' as _i12;
import 'package:zentriq/domain/repositories/project_repository.dart' as _i10;
import 'package:zentriq/domain/repositories/token_repository.dart' as _i8;
import 'package:zentriq/domain/repositories/wallet_repository.dart' as _i2;
import 'package:zentriq/domain/usecases/get_all_projects.dart' as _i19;
import 'package:zentriq/domain/usecases/get_all_tokens.dart' as _i17;
import 'package:zentriq/domain/usecases/get_featured_projects.dart' as _i20;
import 'package:zentriq/domain/usecases/get_latest_news.dart' as _i21;
import 'package:zentriq/domain/usecases/get_top_performers.dart' as _i18;
import 'package:zentriq/domain/usecases/get_transaction_history.dart' as _i15;
import 'package:zentriq/domain/usecases/get_trending_news.dart' as _i22;
import 'package:zentriq/domain/usecases/get_wallet.dart' as _i14;
import 'package:zentriq/domain/usecases/send_transaction.dart' as _i16;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [WalletRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletRepository extends _i1.Mock implements _i2.WalletRepository {
  MockWalletRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i5.Wallet>> getCurrentWallet() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentWallet, []),
            returnValue: _i3.Future<_i4.Result<_i5.Wallet>>.value(
              _i6.dummyValue<_i4.Result<_i5.Wallet>>(
                this,
                Invocation.method(#getCurrentWallet, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<_i5.Wallet>>);

  @override
  _i3.Future<_i4.Result<double>> getWalletBalance(String? address) =>
      (super.noSuchMethod(
            Invocation.method(#getWalletBalance, [address]),
            returnValue: _i3.Future<_i4.Result<double>>.value(
              _i6.dummyValue<_i4.Result<double>>(
                this,
                Invocation.method(#getWalletBalance, [address]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<double>>);

  @override
  _i3.Future<_i4.Result<double>> getWalletBalanceUSD(String? address) =>
      (super.noSuchMethod(
            Invocation.method(#getWalletBalanceUSD, [address]),
            returnValue: _i3.Future<_i4.Result<double>>.value(
              _i6.dummyValue<_i4.Result<double>>(
                this,
                Invocation.method(#getWalletBalanceUSD, [address]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<double>>);

  @override
  _i3.Future<_i4.Result<List<_i7.Transaction>>> getTransactionHistory(
    String? address,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTransactionHistory, [address]),
            returnValue: _i3.Future<_i4.Result<List<_i7.Transaction>>>.value(
              _i6.dummyValue<_i4.Result<List<_i7.Transaction>>>(
                this,
                Invocation.method(#getTransactionHistory, [address]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i7.Transaction>>>);

  @override
  _i3.Future<_i4.Result<_i7.Transaction>> sendTransaction({
    required String? toAddress,
    required double? amount,
    String? note,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendTransaction, [], {
              #toAddress: toAddress,
              #amount: amount,
              #note: note,
            }),
            returnValue: _i3.Future<_i4.Result<_i7.Transaction>>.value(
              _i6.dummyValue<_i4.Result<_i7.Transaction>>(
                this,
                Invocation.method(#sendTransaction, [], {
                  #toAddress: toAddress,
                  #amount: amount,
                  #note: note,
                }),
              ),
            ),
          )
          as _i3.Future<_i4.Result<_i7.Transaction>>);

  @override
  _i3.Future<_i4.Result<String>> generateNewAddress() =>
      (super.noSuchMethod(
            Invocation.method(#generateNewAddress, []),
            returnValue: _i3.Future<_i4.Result<String>>.value(
              _i6.dummyValue<_i4.Result<String>>(
                this,
                Invocation.method(#generateNewAddress, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<String>>);

  @override
  _i3.Future<_i4.Result<_i5.Wallet>> refreshWallet(String? address) =>
      (super.noSuchMethod(
            Invocation.method(#refreshWallet, [address]),
            returnValue: _i3.Future<_i4.Result<_i5.Wallet>>.value(
              _i6.dummyValue<_i4.Result<_i5.Wallet>>(
                this,
                Invocation.method(#refreshWallet, [address]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<_i5.Wallet>>);
}

/// A class which mocks [TokenRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenRepository extends _i1.Mock implements _i8.TokenRepository {
  MockTokenRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i9.Token>>> getAllTokens() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTokens, []),
            returnValue: _i3.Future<_i4.Result<List<_i9.Token>>>.value(
              _i6.dummyValue<_i4.Result<List<_i9.Token>>>(
                this,
                Invocation.method(#getAllTokens, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i9.Token>>>);

  @override
  _i3.Future<_i4.Result<List<_i9.Token>>> getTopPerformers({int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getTopPerformers, [], {#limit: limit}),
            returnValue: _i3.Future<_i4.Result<List<_i9.Token>>>.value(
              _i6.dummyValue<_i4.Result<List<_i9.Token>>>(
                this,
                Invocation.method(#getTopPerformers, [], {#limit: limit}),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i9.Token>>>);

  @override
  _i3.Future<_i4.Result<_i9.Token>> getTokenBySymbol(String? symbol) =>
      (super.noSuchMethod(
            Invocation.method(#getTokenBySymbol, [symbol]),
            returnValue: _i3.Future<_i4.Result<_i9.Token>>.value(
              _i6.dummyValue<_i4.Result<_i9.Token>>(
                this,
                Invocation.method(#getTokenBySymbol, [symbol]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<_i9.Token>>);

  @override
  _i3.Future<_i4.Result<_i9.Token>> getTokenById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTokenById, [id]),
            returnValue: _i3.Future<_i4.Result<_i9.Token>>.value(
              _i6.dummyValue<_i4.Result<_i9.Token>>(
                this,
                Invocation.method(#getTokenById, [id]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<_i9.Token>>);

  @override
  _i3.Future<_i4.Result<List<_i9.Token>>> refreshTokens() =>
      (super.noSuchMethod(
            Invocation.method(#refreshTokens, []),
            returnValue: _i3.Future<_i4.Result<List<_i9.Token>>>.value(
              _i6.dummyValue<_i4.Result<List<_i9.Token>>>(
                this,
                Invocation.method(#refreshTokens, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i9.Token>>>);

  @override
  _i3.Future<_i4.Result<List<_i9.Token>>> getTokensByMarketCap({
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTokensByMarketCap, [], {#limit: limit}),
            returnValue: _i3.Future<_i4.Result<List<_i9.Token>>>.value(
              _i6.dummyValue<_i4.Result<List<_i9.Token>>>(
                this,
                Invocation.method(#getTokensByMarketCap, [], {#limit: limit}),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i9.Token>>>);

  @override
  _i3.Future<_i4.Result<List<_i9.Token>>> getTokensByVolume({
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTokensByVolume, [], {#limit: limit}),
            returnValue: _i3.Future<_i4.Result<List<_i9.Token>>>.value(
              _i6.dummyValue<_i4.Result<List<_i9.Token>>>(
                this,
                Invocation.method(#getTokensByVolume, [], {#limit: limit}),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i9.Token>>>);
}

/// A class which mocks [ProjectRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectRepository extends _i1.Mock implements _i10.ProjectRepository {
  MockProjectRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i11.Project>>> getAllProjects() =>
      (super.noSuchMethod(
            Invocation.method(#getAllProjects, []),
            returnValue: _i3.Future<_i4.Result<List<_i11.Project>>>.value(
              _i6.dummyValue<_i4.Result<List<_i11.Project>>>(
                this,
                Invocation.method(#getAllProjects, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i11.Project>>>);

  @override
  _i3.Future<_i4.Result<List<_i11.Project>>> getProjectsByCategory(
    _i11.ProjectCategory? category,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getProjectsByCategory, [category]),
            returnValue: _i3.Future<_i4.Result<List<_i11.Project>>>.value(
              _i6.dummyValue<_i4.Result<List<_i11.Project>>>(
                this,
                Invocation.method(#getProjectsByCategory, [category]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i11.Project>>>);

  @override
  _i3.Future<_i4.Result<List<_i11.Project>>> getFeaturedProjects({
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getFeaturedProjects, [], {#limit: limit}),
            returnValue: _i3.Future<_i4.Result<List<_i11.Project>>>.value(
              _i6.dummyValue<_i4.Result<List<_i11.Project>>>(
                this,
                Invocation.method(#getFeaturedProjects, [], {#limit: limit}),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i11.Project>>>);

  @override
  _i3.Future<_i4.Result<List<_i11.Project>>> getRecentlyLaunchedProjects({
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentlyLaunchedProjects, [], {
              #limit: limit,
            }),
            returnValue: _i3.Future<_i4.Result<List<_i11.Project>>>.value(
              _i6.dummyValue<_i4.Result<List<_i11.Project>>>(
                this,
                Invocation.method(#getRecentlyLaunchedProjects, [], {
                  #limit: limit,
                }),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i11.Project>>>);

  @override
  _i3.Future<_i4.Result<List<_i11.Project>>> getPopularProjects({
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPopularProjects, [], {#limit: limit}),
            returnValue: _i3.Future<_i4.Result<List<_i11.Project>>>.value(
              _i6.dummyValue<_i4.Result<List<_i11.Project>>>(
                this,
                Invocation.method(#getPopularProjects, [], {#limit: limit}),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i11.Project>>>);

  @override
  _i3.Future<_i4.Result<_i11.Project>> getProjectById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProjectById, [id]),
            returnValue: _i3.Future<_i4.Result<_i11.Project>>.value(
              _i6.dummyValue<_i4.Result<_i11.Project>>(
                this,
                Invocation.method(#getProjectById, [id]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<_i11.Project>>);

  @override
  _i3.Future<_i4.Result<List<_i11.Project>>> searchProjects(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchProjects, [query]),
            returnValue: _i3.Future<_i4.Result<List<_i11.Project>>>.value(
              _i6.dummyValue<_i4.Result<List<_i11.Project>>>(
                this,
                Invocation.method(#searchProjects, [query]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i11.Project>>>);

  @override
  _i3.Future<_i4.Result<List<_i11.Project>>> refreshProjects() =>
      (super.noSuchMethod(
            Invocation.method(#refreshProjects, []),
            returnValue: _i3.Future<_i4.Result<List<_i11.Project>>>.value(
              _i6.dummyValue<_i4.Result<List<_i11.Project>>>(
                this,
                Invocation.method(#refreshProjects, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i11.Project>>>);
}

/// A class which mocks [NewsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsRepository extends _i1.Mock implements _i12.NewsRepository {
  MockNewsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i13.NewsArticle>>> getAllNews() =>
      (super.noSuchMethod(
            Invocation.method(#getAllNews, []),
            returnValue: _i3.Future<_i4.Result<List<_i13.NewsArticle>>>.value(
              _i6.dummyValue<_i4.Result<List<_i13.NewsArticle>>>(
                this,
                Invocation.method(#getAllNews, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i13.NewsArticle>>>);

  @override
  _i3.Future<_i4.Result<List<_i13.NewsArticle>>> getLatestNews({
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getLatestNews, [], {#limit: limit}),
            returnValue: _i3.Future<_i4.Result<List<_i13.NewsArticle>>>.value(
              _i6.dummyValue<_i4.Result<List<_i13.NewsArticle>>>(
                this,
                Invocation.method(#getLatestNews, [], {#limit: limit}),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i13.NewsArticle>>>);

  @override
  _i3.Future<_i4.Result<List<_i13.NewsArticle>>> getTrendingNews({
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTrendingNews, [], {#limit: limit}),
            returnValue: _i3.Future<_i4.Result<List<_i13.NewsArticle>>>.value(
              _i6.dummyValue<_i4.Result<List<_i13.NewsArticle>>>(
                this,
                Invocation.method(#getTrendingNews, [], {#limit: limit}),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i13.NewsArticle>>>);

  @override
  _i3.Future<_i4.Result<List<_i13.NewsArticle>>> getNewsByCategory(
    _i13.NewsCategory? category, {
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getNewsByCategory, [category], {#limit: limit}),
            returnValue: _i3.Future<_i4.Result<List<_i13.NewsArticle>>>.value(
              _i6.dummyValue<_i4.Result<List<_i13.NewsArticle>>>(
                this,
                Invocation.method(
                  #getNewsByCategory,
                  [category],
                  {#limit: limit},
                ),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i13.NewsArticle>>>);

  @override
  _i3.Future<_i4.Result<List<_i13.NewsArticle>>> getBreakingNews({
    int? limit = 5,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getBreakingNews, [], {#limit: limit}),
            returnValue: _i3.Future<_i4.Result<List<_i13.NewsArticle>>>.value(
              _i6.dummyValue<_i4.Result<List<_i13.NewsArticle>>>(
                this,
                Invocation.method(#getBreakingNews, [], {#limit: limit}),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i13.NewsArticle>>>);

  @override
  _i3.Future<_i4.Result<_i13.NewsArticle>> getNewsById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getNewsById, [id]),
            returnValue: _i3.Future<_i4.Result<_i13.NewsArticle>>.value(
              _i6.dummyValue<_i4.Result<_i13.NewsArticle>>(
                this,
                Invocation.method(#getNewsById, [id]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<_i13.NewsArticle>>);

  @override
  _i3.Future<_i4.Result<List<_i13.NewsArticle>>> searchNews(
    String? query, {
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchNews, [query], {#limit: limit}),
            returnValue: _i3.Future<_i4.Result<List<_i13.NewsArticle>>>.value(
              _i6.dummyValue<_i4.Result<List<_i13.NewsArticle>>>(
                this,
                Invocation.method(#searchNews, [query], {#limit: limit}),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i13.NewsArticle>>>);

  @override
  _i3.Future<_i4.Result<List<_i13.NewsArticle>>> getBookmarkedNews() =>
      (super.noSuchMethod(
            Invocation.method(#getBookmarkedNews, []),
            returnValue: _i3.Future<_i4.Result<List<_i13.NewsArticle>>>.value(
              _i6.dummyValue<_i4.Result<List<_i13.NewsArticle>>>(
                this,
                Invocation.method(#getBookmarkedNews, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i13.NewsArticle>>>);

  @override
  _i3.Future<_i4.Result<void>> bookmarkNews(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#bookmarkNews, [id]),
            returnValue: _i3.Future<_i4.Result<void>>.value(
              _i6.dummyValue<_i4.Result<void>>(
                this,
                Invocation.method(#bookmarkNews, [id]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<void>>);

  @override
  _i3.Future<_i4.Result<void>> removeBookmark(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeBookmark, [id]),
            returnValue: _i3.Future<_i4.Result<void>>.value(
              _i6.dummyValue<_i4.Result<void>>(
                this,
                Invocation.method(#removeBookmark, [id]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<void>>);

  @override
  _i3.Future<_i4.Result<void>> markAsRead(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#markAsRead, [id]),
            returnValue: _i3.Future<_i4.Result<void>>.value(
              _i6.dummyValue<_i4.Result<void>>(
                this,
                Invocation.method(#markAsRead, [id]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<void>>);

  @override
  _i3.Future<_i4.Result<List<_i13.NewsArticle>>> refreshNews() =>
      (super.noSuchMethod(
            Invocation.method(#refreshNews, []),
            returnValue: _i3.Future<_i4.Result<List<_i13.NewsArticle>>>.value(
              _i6.dummyValue<_i4.Result<List<_i13.NewsArticle>>>(
                this,
                Invocation.method(#refreshNews, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i13.NewsArticle>>>);
}

/// A class which mocks [GetWallet].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWallet extends _i1.Mock implements _i14.GetWallet {
  MockGetWallet() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i5.Wallet>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i3.Future<_i4.Result<_i5.Wallet>>.value(
              _i6.dummyValue<_i4.Result<_i5.Wallet>>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<_i5.Wallet>>);
}

/// A class which mocks [GetTransactionHistory].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTransactionHistory extends _i1.Mock
    implements _i15.GetTransactionHistory {
  MockGetTransactionHistory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i7.Transaction>>> call(String? address) =>
      (super.noSuchMethod(
            Invocation.method(#call, [address]),
            returnValue: _i3.Future<_i4.Result<List<_i7.Transaction>>>.value(
              _i6.dummyValue<_i4.Result<List<_i7.Transaction>>>(
                this,
                Invocation.method(#call, [address]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i7.Transaction>>>);
}

/// A class which mocks [SendTransaction].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendTransaction extends _i1.Mock implements _i16.SendTransaction {
  MockSendTransaction() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<_i7.Transaction>> call(
    _i16.SendTransactionParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i3.Future<_i4.Result<_i7.Transaction>>.value(
              _i6.dummyValue<_i4.Result<_i7.Transaction>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<_i7.Transaction>>);
}

/// A class which mocks [GetAllTokens].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTokens extends _i1.Mock implements _i17.GetAllTokens {
  MockGetAllTokens() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i9.Token>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i3.Future<_i4.Result<List<_i9.Token>>>.value(
              _i6.dummyValue<_i4.Result<List<_i9.Token>>>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i9.Token>>>);
}

/// A class which mocks [GetTopPerformers].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopPerformers extends _i1.Mock implements _i18.GetTopPerformers {
  MockGetTopPerformers() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i9.Token>>> call(
    _i18.GetTopPerformersParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i3.Future<_i4.Result<List<_i9.Token>>>.value(
              _i6.dummyValue<_i4.Result<List<_i9.Token>>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i9.Token>>>);
}

/// A class which mocks [GetAllProjects].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllProjects extends _i1.Mock implements _i19.GetAllProjects {
  MockGetAllProjects() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i11.Project>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i3.Future<_i4.Result<List<_i11.Project>>>.value(
              _i6.dummyValue<_i4.Result<List<_i11.Project>>>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i11.Project>>>);
}

/// A class which mocks [GetFeaturedProjects].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFeaturedProjects extends _i1.Mock
    implements _i20.GetFeaturedProjects {
  MockGetFeaturedProjects() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i11.Project>>> call(
    _i20.GetFeaturedProjectsParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i3.Future<_i4.Result<List<_i11.Project>>>.value(
              _i6.dummyValue<_i4.Result<List<_i11.Project>>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i11.Project>>>);
}

/// A class which mocks [GetLatestNews].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLatestNews extends _i1.Mock implements _i21.GetLatestNews {
  MockGetLatestNews() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i13.NewsArticle>>> call(
    _i21.GetLatestNewsParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i3.Future<_i4.Result<List<_i13.NewsArticle>>>.value(
              _i6.dummyValue<_i4.Result<List<_i13.NewsArticle>>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i13.NewsArticle>>>);
}

/// A class which mocks [GetTrendingNews].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTrendingNews extends _i1.Mock implements _i22.GetTrendingNews {
  MockGetTrendingNews() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i13.NewsArticle>>> call(
    _i22.GetTrendingNewsParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i3.Future<_i4.Result<List<_i13.NewsArticle>>>.value(
              _i6.dummyValue<_i4.Result<List<_i13.NewsArticle>>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i3.Future<_i4.Result<List<_i13.NewsArticle>>>);
}
